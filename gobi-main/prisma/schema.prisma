generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Slot {
  id        String   @id @default(uuid())
  name      String?
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  content   String
  createdAt DateTime @default(now())
}

model CsvData {
  id          String   @id @default(uuid())
  phoneNumber String
  name        String?
  processed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Campaign {
  id              String          @id @default(cuid())
  name            String
  description     String?
  status          String          @default("DRAFT")
  campaignType    String          @default("INBOUND")
  script          String?
  totalLeads      Int             @default(0)
  callsMade       Int             @default(0)
  callsAnswered   Int             @default(0)
  conversionRate  Float           @default(0.0)
  averageDuration Float           @default(0.0)
  totalCost       Float           @default(0.0)
  tenantId        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  tenant          Tenant?         @relation(fields: [tenantId], references: [id])
  analytics       CallAnalytics[]
  agents          CampaignAgent[]
  conversations   Conversation[]
  leads           Lead[]
  assignedLeadLists LeadList[]    @relation("LeadListCampaigns")
  phoneNumbers    PhoneNumber[]
  livekitTrunks   LiveKitTrunk[]
  dispatchRules   DispatchRule[]

  @@unique([name, tenantId])
  @@index([tenantId])
}

model LeadList {
  id                String   @id @default(cuid())
  name              String
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  leads             Lead[]
  assignedCampaigns Campaign[] @relation("LeadListCampaigns")

  @@index([name])
}

model Lead {
  id            String         @id @default(cuid())
  phoneNumber   String
  name          String?
  email         String?
  status        String         @default("PENDING")
  errorReason   String?
  campaignId    String?
  listId        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  campaign      Campaign?      @relation(fields: [campaignId], references: [id])
  leadList      LeadList?      @relation(fields: [listId], references: [id])

  @@index([campaignId])
  @@index([listId])
}

model Conversation {
  id            String    @id @default(cuid())
  leadId        String
  campaignId    String
  agentId       String?
  status        String    @default("IN_PROGRESS")
  callStartTime DateTime?
  callEndTime   DateTime?
  duration      Int?
  results       String?
  transcript    String?
  sentiment     String?
  leadScore     Int?
  outcome       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  agent         Agent?    @relation(fields: [agentId], references: [id])
  campaign      Campaign  @relation(fields: [campaignId], references: [id])
  lead          Lead      @relation(fields: [leadId], references: [id])

  @@index([campaignId])
  @@index([agentId])
}

model PhoneNumber {
  id              String   @id @default(cuid())
  number          String   @unique
  friendlyName    String?
  status          String   @default("AVAILABLE")
  capabilities    String
  twilioSid       String   @unique
  twilioAccount   String
  country         String
  region          String?
  monthlyCost     Float    @default(0.0)
  assignedAgentId String?  @unique
  callDirection   String   @default("BOTH")
  webhookUrl      String?
  tenantId        String?
  campaignId      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  assignedAgent   Agent?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id])
  campaign        Campaign? @relation(fields: [campaignId], references: [id])

  @@index([status])
  @@index([assignedAgentId])
  @@index([callDirection])
  @@index([tenantId])
  @@index([campaignId])
}

model Agent {
  id              String          @id @default(cuid())
  name            String          @unique
  description     String?
  prompt          String
  model           String          @default("gpt-4")
  voice           String          @default("nova")
  temperature     Float           @default(0.7)
  maxTokens       Int             @default(1000)
  status          String          @default("INACTIVE")
  deploymentMode  String          @default("livekit")
  template        String          @default("custom")
  phoneNumberId   String?         @unique
  livekitConfig   String?
  twilioConfig    String?
  performance     String?
  totalCalls      Int             @default(0)
  successfulCalls Int             @default(0)
  conversionRate  Float           @default(0.0)
  averageDuration Float           @default(0.0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  phoneNumber     PhoneNumber?    @relation(fields: [phoneNumberId], references: [id])
  campaigns       CampaignAgent[]
  conversations   Conversation[]

  @@index([status])
  @@index([phoneNumberId])
}

model CampaignAgent {
  id         String   @id @default(cuid())
  campaignId String
  agentId    String
  isActive   Boolean  @default(true)
  priority   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  agent      Agent    @relation(fields: [agentId], references: [id])
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@unique([campaignId, agentId])
  @@index([campaignId])
  @@index([agentId])
}

model CallAnalytics {
  id               String    @id @default(cuid())
  campaignId       String
  agentId          String?
  leadId           String
  phoneNumber      String
  callStartTime    DateTime
  callEndTime      DateTime?
  duration         Int?
  status           String
  outcome          String?
  transcript       String?
  sentiment        String?
  keywords         String
  leadScore        Int?
  agentPerformance String?
  cost             Float     @default(0.0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  campaign         Campaign  @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@index([agentId])
  @@index([callStartTime])
}

model SystemMetrics {
  id              String   @id @default(cuid())
  date            DateTime @unique
  totalCalls      Int      @default(0)
  answeredCalls   Int      @default(0)
  conversionRate  Float    @default(0.0)
  averageDuration Float    @default(0.0)
  totalCost       Float    @default(0.0)
  activeAgents    Int      @default(0)
  activeCampaigns Int      @default(0)
  systemUptime    Float    @default(100.0)
  errorRate       Float    @default(0.0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([date])
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  domain      String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contactEmail String?
  contactPhone String?
  address      String?
  maxUsers     Int?     @default(100)

  users        User[]
  campaigns    Campaign[]
  phoneNumbers PhoneNumber[]
  livekitTrunks LiveKitTrunk[]
  platformTrunks PlatformTrunk[]
  dispatchRules DispatchRule[]

  @@map("tenants")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  username     String?        @unique
  passwordHash String
  firstName    String?
  lastName     String?
  isActive     Boolean        @default(true)
  permissions  BigInt[]       @default([])
  lastLoginAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  tenantId     String?
  tenant       Tenant?        @relation(fields: [tenantId], references: [id])
  refreshTokens RefreshToken[]
  passwordResetTokens PasswordResetToken[]

  @@index([email])
  @@index([username])
  @@index([tenantId])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId])
  @@map("password_reset_tokens")
}

model LiveKitTrunk {
  id                String   @id @default(cuid())
  name              String
  description       String?
  trunkType         String   @default("INBOUND")
  livekitTrunkId    String?  @unique
  status            String   @default("PENDING")
  tenantId          String?
  platformTrunkId   String?
  campaignId        String?
  maxConcurrentCalls Int     @default(10)
  codecPreferences  String[]
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant            Tenant?  @relation(fields: [tenantId], references: [id])
  platformTrunk     PlatformTrunk? @relation(fields: [platformTrunkId], references: [id])
  campaign          Campaign? @relation(fields: [campaignId], references: [id])
  dispatchRules     DispatchRule[]

  @@index([tenantId])
  @@index([campaignId])
  @@map("livekit_trunks")
}

model PlatformTrunk {
  id                String   @id @default(cuid())
  name              String
  description       String?
  sipAddress        String?
  twilioTrunkSid    String?  @unique
  status            String   @default("ACTIVE")
  tenantId          String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant            Tenant?  @relation(fields: [tenantId], references: [id])
  livekitTrunks     LiveKitTrunk[]

  @@index([tenantId])
  @@map("platform_trunks")
}

model DispatchRule {
  id                    String   @id @default(cuid())
  name                  String
  agentName             String?
  livekitDispatchRuleId String?  @unique
  ruleType              String   @default("direct")
  roomName              String?
  status                String   @default("ACTIVE")
  tenantId              String?
  campaignId            String?
  livekitTrunkId        String?
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  tenant                Tenant?  @relation(fields: [tenantId], references: [id])
  campaign              Campaign? @relation(fields: [campaignId], references: [id])
  livekitTrunk          LiveKitTrunk? @relation(fields: [livekitTrunkId], references: [id])

  @@index([tenantId])
  @@index([campaignId])
  @@map("dispatch_rules")
}